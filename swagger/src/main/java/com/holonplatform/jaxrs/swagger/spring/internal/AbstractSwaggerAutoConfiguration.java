/*
 * Copyright 2016-2018 Axioma srl.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.holonplatform.jaxrs.swagger.spring.internal;

import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

import com.holonplatform.jaxrs.swagger.exceptions.ApiContextConfigurationException;
import com.holonplatform.jaxrs.swagger.internal.ApiGroupId;
import com.holonplatform.jaxrs.swagger.spring.SwaggerConfigurationProperties;
import com.holonplatform.jaxrs.swagger.spring.SwaggerConfigurationProperties.ApiGroupConfiguration;

/**
 * Base Swagger API listing resources auto configuration class.
 *
 * @since 5.2.0
 */
public class AbstractSwaggerAutoConfiguration extends AbstractSwaggerConfigurator {

	private final SwaggerConfigurationProperties configurationProperties;

	public AbstractSwaggerAutoConfiguration(SwaggerConfigurationProperties configurationProperties) {
		super();
		this.configurationProperties = configurationProperties;
	}

	/**
	 * Get whether the swagger API listing resources configuration is enabled.
	 * @return whether the swagger API listing resources configuration is enable
	 */
	protected boolean isEnabled() {
		return configurationProperties.isEnabled();
	}

	/**
	 * Get whether the swagger API listing pretty print is enabled.
	 * @return whether the swagger API listing pretty print is enable
	 */
	protected boolean isPrettyPrint() {
		return configurationProperties.isPrettyPrint();
	}

	/**
	 * Get the {@link ApiListingDefinition}s from current Swagger configuration properties.
	 * @return The API listing definitions, an empty list if none
	 */
	protected List<ApiListingDefinition> getApiListings() {
		final List<ApiListingDefinition> definitions = new LinkedList<>();
		if (configurationProperties != null) {
			// check groups
			List<ApiGroupConfiguration> groups = (configurationProperties.getApiGroups() == null)
					? Collections.emptyList()
					: configurationProperties.getApiGroups();
			if (!groups.isEmpty()) {
				int autoGeneratedGroupIds = 0;
				for (ApiGroupConfiguration group : groups) {
					String groupId = group.getGroupId();
					if (groupId == null || groupId.trim().equals("")) {
						autoGeneratedGroupIds++;
						groupId = generateGroupId(autoGeneratedGroupIds, groups);
					}
					// check duplicate group id
					if (isGroupIdPresent(definitions, groupId)) {
						throw new ApiContextConfigurationException("Duplicate API group id: " + groupId
								+ ". Check the application configuration properties.");
					}
					// check valid configuration
					if (group.getResourcePackage() == null || group.getResourcePackage().trim().equals("")) {
						throw new ApiContextConfigurationException("Invalid API group definition [" + groupId
								+ "]: missing resource-package declaration. Check the application configuration properties.");
					}
					definitions.add(ApiListingDefinition.create(groupId, configurationProperties, group));
				}
			} else {
				// default group
				if (configurationProperties.getResourcePackage() != null
						&& !configurationProperties.getResourcePackage().trim().equals("")) {
					definitions.add(ApiListingDefinition.create(ApiGroupId.DEFAULT_GROUP_ID, configurationProperties));
				}
			}
		}
		return definitions;
	}

	/**
	 * Generate a group id.
	 * @param count The current generated group id count.
	 * @param groups The available group definitions
	 * @return The generated group id
	 */
	private static String generateGroupId(int count, List<ApiGroupConfiguration> groups) {
		final String groupId = "_group" + count;
		if (groups.stream().filter(g -> g.getGroupId() != null).filter(g -> groupId.equals(g.getGroupId()))
				.count() > 0) {
			return groupId + "_1";
		}
		return groupId;
	}

	/**
	 * Checks whether given group id is already present in given definitions.
	 * @param definitions API listing definitions (not null)
	 * @param groupId The group id to check (not null)
	 * @return <code>true</code> if given group id is already present in given definitions, <code>false</code> otherwise
	 */
	private static boolean isGroupIdPresent(List<ApiListingDefinition> definitions, String groupId) {
		return definitions.stream().filter(d -> groupId.equals(d.getGroupId())).findFirst().isPresent();
	}

}
